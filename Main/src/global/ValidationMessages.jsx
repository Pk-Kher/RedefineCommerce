export const ValidationMsgs = {
  common: {
    vendorIdRequired: "Vendor is required.",
    vendorIdTypeError: "Vendor must be a number.",
    brandIdRequired: "Brand is required.",
    brandIdTypeError: "Brand must be a number.",
    storeIdRequired: "Store is required.",
    storeIdTypeError: "Store must be a number.",
    categoryIdRequired: "Category is required.",
    phoneRequired: "Phone number is required.",
    phoneMatches: "Enter valid phone number.",
    recStatusRequired: "Status is required.",
    emailRequired: "Email is required.",
    Email: "Please Enter a valid Email.",
    productstatus: "Product status is required.",
    seoConfigConnection: "Connection is required.",
    seoConfigApiKey: "ApiKey is required.",
    socialOptionName: "OptionName is required.",
    socialOptionUrl: "OptionUrl is required.",
    serverError: "Something went wrong. please try again.",
    EmailPasswordRequired: "Email or password are not valid.",
    firstNameRequired: "First name is required.",
    lastNameRequired: "Last name is required.",
    addressRequired: "Address is required.",
    cityRequired: "City is required.",
    stateRequired: "State is required.",
    countryRequired: "Country is required.",
    postalCodeRequired: "Postal code is required.",
    postalCodeLength: "Postal code length is not be greater than 6 character.",
    faxLength: "FAX length is not be greater than 15 character.",
    countryCodeLength: "Country code length is not be greater than 3 character.",
    productNotFound: "Product not found.",
    tabValidation: "Tab has form validation.",
    otpNotSend: "Otp is not Send",
    importFileRequired: "Import File is required.",
    exportFileRequired: "Export File is required.",
    otpSend: 'Verification code has been sent to your devices. Enter the code to continue.',
    minpercentage: "Percentage must be greater than 0",
    maxpercentage: "Percentage must be less than or equal 100",
  },

  masterCatalog: {
    basicInformation: {
      nameRequired: "Product name is required",
      bundleNameRequired: "Bundle name is required",
      nameInERPRequired: "ERP name is required",
      erpItemIdRequired: "ERP ID is required",
      vendorSKURequired: "Vendor SKU is required",
      ourSKURequired: "Product SKU is required",
      producttypeIdRequired: "Product type ID is required",
      companionProductRequired: "Companion Product is required ",
      taxCodeRequired: "Tax code is required",
      categoryIdRequired: "Category is required",
      descriptionRequired: "Product description is required.",
      shortDescriptionRequired: "Short description is required",
      dimensionTemplateIdRequired: "Dimension is required",
      widthRequired: "Width is required",
      heightRequired: "Height is required",
      lengthRequired: "Length is required",
      volumeRequired: "Volume is required",
      weightInLBSRequired: "Weight in LBS is required",
      shipWeightinLBSRequired: "Ship weight is required",
      created: "Basic information is created successfully.",
      notCreated: "Basic information is not created.",
      updated: "Basic information is updated successfully.",
      notUpdated: "Basic information is not updated.",
    },
    seo: {
      pagetitleRequired: "Page title is required",
      seNameRequired: "Page URL is required",
      metadescriptionRequired: "Meta description is required",
      metaKeywordsRequired: "Meta keywords is required",
      opengraphtitleRequired: "Open Graph title is required",
      opengraphdescriptionRequired: "Open graph description is required",
      created: "SEO information is created successfully",
      notCreated: "SEO information is not created",
      updated: "SEO information is updated successfully",
      notUpdated: "SEO information is not updated",
    },
    attributes: {
      optionNameRequired: "Option name is required",
      productTypeRequired: "Product type is required",
      optionValueRequired: "Option value is required",
      suffixRequired: "Suffix is required",
      altTagRequired: "Alt tag is required",
      attributeValueRequired: "Attribute value is required",
      attributeSynced: "Attribute is successfully synced with Store.",
      attributeNotSynced: "Attribute is not synced with Store.",
      imageUpdated: "Attribute image is updated successfully.",
      imageNotUpdated: "Attribute image is not updated.",
      combinationCreated: "Attribute combination is create/updated successfully.",
      combinationNotCreated: "Attribute combination is not created",
      combinationStatusUpdated: "Attribute combination status is changed successfully.",
      combinationStatusNotUpdated: "Attribute combination status not changed.",
      attributeDetailsMsg: "This will remove your existing options and generate new options by selection.Do you want to continue?",
      elseAttributeDetailMsg: "Size options are not available for selected variant.",
    },
    customerFaqs: {
      questionRequired: "Question is required.",
      answerRequired: "Answer is required.",
      created: "Customer FAQ is create successfully.",
      notCreated: "Customer FAQ is not created.",
      deleted: "Customer FAQ is deleted successfully.",
      notDeleted: "Customer FAQ is not deleted.",
      statusUpdated: "Customer FAQ status is updated successfully.",
      statusNotUpdated: "Customer FAQ status is not updated.",
      deletePermanently: "Deleting this FAQ will permanently remove this record from your account. This can't be undone.",
    },
    customerReviews: {
      deleted: "Customer review is deleted successfully.",
      notDeleted: "Customer review is not deleted.",
      statusUpdated: "Customer review status is updated successfully.",
      statusNotUpdated: "Customer review status is not updated.",
      deletePermanently: "Deleting this review will permanently remove this record from this Product. This can't be undone.",
    },
    facet: {
      created: "Facet is created successfully.",
      notCreated: "Facet is not created.",
      deleted: "Facet is deleted successfully.",
      notDeleted: "Facet is not deleted.",
    },
    inventory: {
      skuRequired: "SKU is required",
      created: "Inventory created/updated successfully.",
      notCreated: "Inventory is not created/updated.",
      Updated: "Ecom Safety Quantity is updated successfully",
      NotUpdated: "Ecom Safety Quantity is not updated successfully",
    },
    personalization: {
      personalizationRequired: "personalization value is required",
      updated: "Personalization is updated successfully",
      notUpdated: "Personalization is not updated",
      deleted: "Personalization is deleted successfully.",
      notDeleted: "Personalization is not deleted.",
      statusUpdated: "Personalization status is updated successfully.",
      statusNotUpdated: "Personalization status is not updated.",
    },
    pricing: {
      ourCostRequired: "OUR cost is required",
      msrpRequired: "MSRP is required",
      imapRequired: "IMAP is required.",
      salePriceRequired: "Sale price is required",
      giftWrapRequired: "Gift wrap Price is required",
      updated: "Pricing is updated successfully",
      notUpdated: "Pricing is not updated",
      salesLassThenMSRP: "Sales price must be less than MSRP.",
      outCostlessThanMSRP: 'Our cost must be less than or equals MSRP.'
    },
    skuSwap: {
      newSKURequired: "New SKU is required",
      updated: "SKU is updated successfully.",
      notUpdated: "SKu is not updated.",
    },
    vendorSKU: {
      updated: "Vendor SKU is updated successfully.",
      notUpdated: "Vendor SKU is not updated.",
      added: "Vendor is added successfully.",
      notAdded: "Vendor is not added.",
    },
    products: {
      statusUpdated: "Product status is Changed successfully",
      statusNotUpdated: "Product status is not changed.",
      Deleted: "Product is deleted successfully.",
      notDeleted: "Product is not deleted.",
      ProductDiscontinuesuccessfully: "Product is Discontinued successfully",
      ProductDiscontinue: "Product is not Discontinued successfully",
      notDiscontinue: "This product is not available in any store."
    },
    Store: {
      brand: {
        nameRequired: "Brand name is required.",
        seTitleRequired: "SEO title is required.",
        seKeywordRequired: "SEO keyword is required.",
        seDescriptionRequired: "SEO description is required.",
        brandNotCreated: "Brand is not created.",
        vendorNotStored: "Vendor is not stored.",
        brandCreated: "Brand is created successfully",
        brandUpdated: "Brand is updated successfully",
        brandNotUpdated: "Brand is not updated.",
      },
      catalog: {
        displayOrderTypeError: "Please enter valid display order.",
        displayOrderRequired: "Display order required.",
        catalogFileNameRequired: "Catalog file name is required.",
        catalogFileRequired: "Catalog file is required.",
        catalogLogoRequired: "Catalog logo is required.",
      },
    },
  },

  store: {
    nameRequired: "Name is required.",
    storeTypeIdRequired: "Type is required.",
    prefixRequired: "Store prefix is required.",
    navCodeRequired: "Store nav code is required.",
    attributeidRequired: "Attribute is required.",
    firstLineCharges: "First line charges is required",
    secondLineCharges: "Second line charges is required",
    smallRunLimit: "Small run limit charges is required",
    smallRunFeesCharges: "Small run fees charges is required",
    logoSetupCharges: "Logo set-up charges is required",
    storeCreated: "Store is created successfully",
    storeNotCreated: "Store is not created.",
    storeUpdated: "Store is updated successfully",
    storeNotUpdated: "Store is not updated.",
    statusUpdated: "Store status changed successfully",
    statusNotUpdated: "Store status is not changed.",
    storeDeleted: "Store deleted successfully.",
    storeNotDeleted: "Store is not deleted.",
    shippingDeleted: "Shipping Price deleted successfully.",
    shippingNotDeleted: "Shipping is not deleted.",
    deletePermanently: "Deleting these store will permanently remove this record from your account. This can't be undone.",
    created: "Store SEO is created successfully.",
    notCreated: "Store SEO is not created.",
    updated: "Store SEO is updated successfully.",
    notUpdated: "Store SEO is not updated successfully.",
    publish: "Product publish successfully.",
    notPublish: "Product not publish.",
    productOrder: {
      orderChanged: "Product order changes successfully."
    }
  },

  seoConfig: {
    nameRequired: "Name is required.",
    urlRequired: "URL is required.",
    headTagCodeGTM: "Head tag code is required",
    bodyTagCodeGTM: "Body tag code is required",
    headTagCodePinterest: "Head verification tag is required",
    htmlVerificationBodyPinterest: "Body verification tag is required",
    verificationTagsHead: "Head verification tag is required",
    verificationTagsBody: "Body verification tag is required",
    verificationCodeRequired: "Verification code is required",
    affiliateConnectionRequired: "Connection is required",
    apiKeyRequired: "API key is required",
    socialInfoUpdated: "Social information is updated successfully.",
    socialInfoNotUpdated: "Social information is not updated.",
    socialDataAdded: "Data is added successfully",
    socialDataNotAdded: "Data is not added",
    socialDataUpdated: "Data is updated successfully",
    socialDataNotUpdated: "Data is not updated",
    created: "SeoConfiguration is created successfully.",
    notCreated: "SeoConfiguration is not created.",
    updated: "SeoConfiguration is updated successfully.",
    notUpdated: "SeoConfiguration is not updated successfully.",
  },

  product: {
    navSyncSuccess: "Product nav synchronization successfully.",
    navSyncFailed: "Product nav synchronization is not changed.",
    navSyncProductRequired: "Please select product for nav synchronization.",
    productCloneRequired: "Please select one product for clone product.",
    cloned: "Product cloned successfully in masterCatalog.",
    notCloned: "Product is not cloned.",
    statusUpdated: "Product status is updated successfully",
    statusNotUpdated: "Product status is not updated.",
    Deleted: "Product is deleted successfully",
    notDeleted: "Product is not deleted successfully",
    bundleAdded: "Bundle product is added successfully",
    bundleNotAdded: "Bundle product is not added successfully",
    Updated: "Product Quantity is updated successfully.",
    notUpdated: "Product Quantity is not updated successfully.",
    updatedEmpty: "Product Quantity must not be empty",
    valueNotUpdated: "Product Quantity contains Same value Please Update First",
    deletePermanently: "Deleting this product will permanently remove this record from your account. This can't be undone",
    export: {
      brand: "Brand is required.",
      vendor: "vendor is required.",
      fieldsname: "Column selection is required.",
      exportTypeRequired: "Export type required",
      exportSuccess: "Data export completed.",
      importSuccess: "Data import completed.",
      exportFailed: "Data export is failed.",
      importFailed: "Data import is failed.",

    },
    notActive: "Product is not ready to Active. Please fill required details.",

    import: {
      ExportTypeError: "Please select an export type.",

    }
  },
  attributes: {
    nameRequired: "Attribute name is required.",
    controlTypeIdRequired: "Control type is required.",
    controlTypeIdTypeError: "Control type must be a number.",
    textpromptRequired: "Text prompt is required.",
    attributeCreated: "Attribute is created successfully.",
    attributeNotCreated: 'Attribute is not created.',
    attributeUpdated: "Attribute is updated successfully",
    attributeNotUpdated: "Attribute is not updated.",
    attributeStatusUpdated: "Attribute status is updated successfully",
    attributeStatusNotUpdated: "Attribute status is not updated.",
    attributeDeleted: "Attribute is deleted successfully.",
    attributeNotDeleted: 'Attribute is not deleted.',
    displayOrderRequired: "Display order is required.",
    displayOrderTypeError: "Display order must be a number.",
    attributePermanentDelete: "Deleting these attribute will permanently remove this record from your account. This can't be undone",
  },

  brand: {
    nameRequired: "Brand name is required.",
    brandNotCreated: "Brand is not created.",
    vendorNotStored: "Vendor is not stored.",
    brandCreated: "Brand is created successfully",
    brandUpdated: "Brand is updated successfully",
    brandNotUpdated: "Brand is not updated.",
    brandStatusUpdated: "Brand status is updated successfully",
    brandStatusNotUpdated: "Brand status is not updated.",
    brandDeleted: "Brand deleted successfully.",
    brandNotDeleted: 'Brand is not deleted.',
    brandPermanentDelete: "Deleting this brand will permanently remove this record from your account. This can't be undone",
    notFound: 'Brand not found.',
  },

  catalog: {
    catalogNameRequired: "Catalog name is required.",
    startDate: "StartDate is required.",
    endDate: "EndDate is required.",
    releaseDate: "ReleaseDate is required.",
    catalogCreated: "Catalog is created successfully.",
    catalogNotCreated: 'Catalog is not created.',
    catalogUpdated: "Catalog is updated successfully.",
    catalogNotUpdated: "Catalog is not updated.",
    catalogDeleted: "Catalog is deleted successfully.",
    catalogNotDeleted: 'Catalog is not deleted.',
    uploadCatalogURLRequired: "Upload catalog is required.",
    endDateGreaterStart: "EndDate cannot be before start Date",
    releaseDateGreaterEnd: "Released date cannot be before End Date",
    catalogStatusUpdated: "Catalog status is updated successfully",
    catalogStatusNotUpdated: "Catalog status is not updated.",
    catalogPermanentDelete: "Deleting these Brand will permanently remove this record from your account. This can't be undone",
  },

  category: {
    nameRequired: "Category name is required.",
    descriptionRequired: "Description is required.",
    collectionImageURlRequired: "Category image is required.",
    categoryCreated: "Category create successfully",
    categoryNotCreated: 'Category is not created.',
    categoryUpdated: "Category update successfully",
    categoryNotUpdated: "Category is not updated.",
    categoryStatusUpdated: "Category status update successfully",
    categoryStatusNotUpdated: "Category status is not updated.",
    categoryDeleted: "Category deleted successfully.",
    categoryNotDeleted: 'Category is not deleted.',
    categoryPermanentDelete: "Deleting these Category will permanently remove this record from your account. This can't be undone.",
  },

  color: {
    nameRequired: "Color name is required.",
    nameLength: "Color name is too long.",
    hexCodeRequired: "Hexcode is required.",
    borderColorRequired: "Border color is required.",
    textColorRequired: "Text color is required.",
    matchesLength: "Enter a valid color code.",
    colorCreated: "Color is created successfully",
    colorNotCreated: 'Color is not created.',
    colorUpdated: "Color is updated successfully",
    colorNotUpdated: "Color is not updated.",
    colorStatusUpdated: "Color status is updated successfully",
    colorStatusNotUpdated: "Color status is not updated.",
    colorDeleted: "Color is deleted successfully.",
    colorNotDeleted: 'Color is not deleted.',
    colorPermanentDelete: "Deleting these color will permanently remove this record from your account. This can't be undone",
  },

  dimension: {
    nameRequired: "Dimension name is required.",
    lenghtRequired: "Length is required.",
    lenghtMatches: "Enter a valid length.",
    widthRequired: "Width is required.",
    widthMatches: "Enter a valid width.",
    heightRequired: "Height is required.",
    heightMatches: "Enter a valid height.",
    dimensionCreated: "Dimension is created successfully",
    dimensionNotCreated: 'Dimension is not created.',
    dimensionUpdated: "Dimension is updated successfully",
    dimensionNotUpdated: "Dimension is not updated.",
    dimensionStatusUpdated: "Dimension status is updated successfully",
    dimensionStatusNotUpdated: "Dimension status is not updated.",
    dimensionDeleted: "Dimension is deleted successfully.",
    dimensionNotDeleted: 'Dimension is not deleted.',
    dimensionPermanentDelete: "Deleting these dimension will permanently remove this record from your account. This can't be undone.",
  },

  logoLocationDetails: {
    nameRequired: "Logo Location name is required.",
    imageUrlRequired: "Location image is required.",
    priceRequired: "Price is required.",
    priceMatches: "Enter a valid price.",
    priceMin: "Price should not be less than zero.",
    costRequired: "Cost is required.",
    costMatches: "Enter a valid cost.",
    costMin: "Cost should not be less than zero.",
    logoLocationCreated: "Logo-Location is created successfully",
    logoLocationNotCreated: 'Logo-Location is not created.',
    logoLocationUpdated: "Logo-Location is updated successfully",
    logoLocationNotUpdated: "Logo-Location is not updated.",
    logoLocationBrandDetailsUpdated: "Brands fields is updated successfully",
    logoLocationBrandDetailsNotUpdated: "Brands fields is updated successfully",
    logoLocationDetailsCreated: "Logo-Location details added successfully",
    logoLocationDetailsNotCreated: 'Logo-Location details is not added.',
    logoLocationDetailsUpdated: "Logo-Location details is updated successfully",
    logoLocationDetailsNotUpdated: "Logo-Location details is not updated.",
    logoLocationStatusUpdated: "Logo-Location status is updated successfully",
    logoLocationStatusNotUpdated: "Logo-Location status is not updated.",
    logoLocationDetailsDeleted: "Logo-Location Details deleted successfully.",
    logoLocationDetailsNotDeleted: 'Logo-Location details is not deleted.',
    logoLocationDeleted: "Logo-Location is deleted successfully.",
    logoLocationNotDeleted: 'Logo-Location is not deleted.',
    logoLocationPermanentDelete: "Deleting these LogoLocation will permanently remove this record from your account. This can't be undone",
  },

  quantityDiscount: {
    nameRequired: "Quantity discount name is required.",
    storeIdRequired: "Store is required.",
    cloneNameRequired: "Clone name is required.",
    storeIdTypeError: "Store must be a number.",
    quantityDiscountClone: "Quantity Discount cloned successfully",
    quantityDiscountNotCloned: 'Quantity Discount is not cloned.',
    quantityDiscountCreated: "Quantity Discount is created successfully",
    quantityDiscountNotCreated: 'Quantity Discount is not created.',
    quantityDiscountUpdated: "Quantity Discount is updated successfully",
    quantityDiscountNotUpdated: "Quantity Discount is not updated.",
    quantityDiscountStatusUpdated: "Quantity Discount status is updated successfully",
    quantityDiscountStatusNotUpdated: "Quantity Discount status is not updated.",
    quantityDiscountDeleted: "Quantity Discount is deleted successfully.",
    quantityDiscountNotDeleted: 'Quantity Discount is not deleted.',
    quantityPermanentDelete: "Deleting this Quantity will permanently remove this record from your account. This can't be undone",
  },

  quantityDiscountDetail: {
    lowQuantityRequired: "Low Quantity is required.",
    lowQuantityTypeError: "Enter a valid low Quantity.",
    highQuantityRequired: "High Quantity is required.",
    highQuantityTypeError: "Enter a valid high Quantity.",
    highQuantityMin: "High Quantity must be greater than Low Quantity.",
    discountPercentRequired: "Discount percentage is required.",
    discountPercentTypeError: "Enter a valid discount percentage.",
    discountPercentMax: "Percentage should not be greater than 100.",
    quantityDiscountDetailCreated: "Quantity Discount details is created successfully",
    quantityDiscountDetailNotCreated: 'Quantity Discount details is not created.',
    quantityDiscountDetailUpdated: "Quantity Discount details is updated successfully",
    quantityDiscountDetailNotUpdated: "Quantity Discount details is not updated.",
    quantityDiscountDetailStatusUpdated: "Quantity Discount details status is updated successfully",
    quantityDiscountDetailStatusNotUpdated: "Quantity Discount details status is not updated.",
    quantityDiscountDetailDeleted: "Quantity Discount details is deleted successfully.",
    quantityDiscountDetailNotDeleted: 'Quantity Discount details is not deleted.',
  },
  sizeMaster: {
    sizeNameRequired: "Product size name is required.",
    productTypeRequired: "Product type is required.",
    displayOrderRequired: "Display order is required.",
    displayOrderTypeError: "Invalid display order.",
    sizeMasterDetailsCreated: "Size details is created successfully",
    sizeMasterDetailsNotCreated: 'Size details is not created.',
    sizeMasterDetailsUpdated: "Size details is updated successfully",
    sizeMasterDetailsNotUpdated: "Size details is not updated.",
    sizeMasterCreated: "Size Master is created successfully",
    sizeMasterNotCreated: 'Product Size is not created.',
    sizeMasterUpdated: "Size Master is updated successfully",
    sizeMasterNotUpdated: "Size Master is not updated.",
    sizeMasterStatusUpdated: "Size Master status is updated successfully",
    sizeMasterStatusNotUpdated: "size Master status is not updated.",
    sizeMasterDeleted: "size Master is deleted successfully.",
    sizeMasterNotDeleted: 'size Master is not deleted.',
    sizeMasterPermanentDelete: "Deleting these Size Master will permanently remove this record from your account. This can't be undone",
  },

  sizeChart: {
    valueRequired: "Size chart value is required",
    descriptionRequired: "Description is required.",
    sizeChartRangeRequired: "Size chart Range is required.",
    measurementRequired: "Measurement is required.",
    sizeChartTemplateNameRequired: "Size chart template name is required.",
    sizeChartCreated: "Size chart is created successfully",
    sizeChartNotCreated: 'Size chart is not created.',
    sizeChartUpdated: "Size chart is updated successfully",
    sizeChartNotUpdated: "Size chart is not updated.",
    sizeChartStatusUpdated: "Size chart status is updated successfully",
    sizeChartStatusNotUpdated: "size chart status is not updated.",
    sizeChartDeleted: "size chart is deleted successfully.",
    sizeChartNotDeleted: 'size chart is not deleted.',
    sizeChartPermanentDelete: "Deleting these size chart will permanently remove this record from your account. This can't be undone",
  },

  vendor: {
    nameRequired: "Vendor name is required.",
    navIdRequired: "NavId is required.",
    contactEmail: "Invalid contact Email.",
    contactPhoneMatches: "Invalid contact phone.",
    websiteMatches: "Enter correct website.",
    imagePortalWebsiteMatches: "Enter a valid  image Portal Website.",
    imagePortalLoginMatches: "Enter a valid image portal login.",
    apiUrlRequired: "API URL is required.",
    apiUrlMatches: "Invalid API URL.",
    apiUsernameRequired: "API username is required.",
    apiPasswordRequired: "API password is required.",
    ftpUrlRequired: "FTP URL is required.",
    ftpUrlMatches: "Enter a valid FTP URL.",
    ftpUsernameRequired: "FTP username is required.",
    ftpPasswordRequired: "FTP password is required.",
    vendorCreated: "Vendor is created successfully",
    vendorNotCreated: 'Vendor is not created.',
    vendorUpdated: "Vendor is updated successfully",
    vendorNotUpdated: "Vendor is not updated.",
    vendorStatusUpdated: "Vendor status update successfully",
    vendorStatusNotUpdated: "Vendor status is not updated.",
    vendorDeleted: "Vendor is deleted successfully.",
    vendorNotDeleted: 'Vendor is not deleted.',
    vendorPermanentDelete: "Deleting these Vendor will permanently remove this record from your account. This can't be undone",
  },
  readiness: {
    nameRequired: "Readiness name is required.",
    percentageRequired: "Readiness publish percentage is required.",
    percentageTypeError: "Enter a valid percentage.",
    percentageMax: "Percentage should not be greater than 100.",
    storeIdRequired: "Store is required.",
    storeIdTypeError: "Store must be a number.",
    readinessCreated: "Readiness created successfully",
    readinessNotCreated: 'Readiness is not created.',
    readinessUpdated: "Readiness is updated successfully",
    readinessNotUpdated: "readiness is not updated.",
    readinessStatusUpdated: "Readiness status is updated successfully",
    readinessStatusNotUpdated: "Readiness status is not updated.",
    readinessDeleted: "Readiness is deleted successfully.",
    readinessNotDeleted: 'Readiness is not deleted.',
  },
  readinessDetails: {
    fieldIdRequired: "Field is required.",
    percentageRequired: "Field percentage is required.",
    percentageTypeError: "Enter a valid percentage.",
    percentageMax: "Percentage should not be greater than 100.",
    readinessDetailsArray: "Readiness details have must.",
    readinessDetailsCreated: "Readiness details is created successfully",
    readinessDetailsNotCreated: 'Readiness details is not created.',
    readinessDetailsUpdated: "Readiness details is updated successfully",
    readinessDetailsNotUpdated: "Readiness details is not updated.",
    readinessDetailsStatusUpdated: "Readiness details status is updated successfully",
    readinessDetailsStatusNotUpdated: "Readiness details status is not updated.",
    readinessDetailsDeleted: "Readiness details is deleted successfully.",
    readinessDetailsNotDeleted: 'Readiness details is not deleted.',
  },

  productTagMaster: {
    nameRequired: "ProductTag name is required",
    imageRequired: "ProductTag image is required",
    tagPositionId: "Position is required",
    storeNameRequired: "ProductTag store name is required",
    statusRequired: "ProductTag status is required",
    productTagTypeID: "ProductTag type ID is required",
    productTagMasterCreated: "ProductTag discount is created successfully",
    productTagMasterNotCreated: 'productTag discount is not created.',
    productTagMasterUpdated: "ProductTag discount is updated successfully",
    productTagMasterNotUpdated: "ProductTag discount is not updated.",
    productTagMasterStatusUpdated: "ProductTag discount status is updated successfully",
    productTagMasterStatusNotUpdated: "ProductTag discount status is not updated.",
    productTagMasterDeleted: "ProductTag discount deleted successfully.",
    productTagMasterNotDeleted: 'ProductTag discount is not deleted.',
    productTagPermanentDelete: "Deleting productTag will permanently remove this record from your account. This can't be undone",
  },

  promotions: {
    namerequired: "Discount name is required",
    storeIdRequired: "Store is required",
    discountcodeRequired: "Discount code is required",
    discountValueRequired: "Discount value is required.",
    statusRequired: "Status is required",
    startDateRequired: "Start Date is required.",
    startTimeRequired: "Start Time is required.",
    endDateRequired: "End Date is required.",
    endTimeRequired: "End Time is required.",
    recStatusRequired: "Recstatus is required",
    PromotionsCreated: "Promotions is created successfully. ",
    PromotionsNotCreated: "Promotions not is created successfully",
    PromotionsUpdated: "Promotions is updated successfully",
    PromotionsNotUpdated: "Promotions is not updated.",
    promotionStatusUpdated: "Promotions status is updated successfully",
    promotionStatusNotUpdated: "Promotions status is not updated.",
    deleted: "Promotions is deleted successfully.",
    notDelete: "Promotions is not deleted.",
    deletePermanently: "Deleting these Promotions will permanently remove this record from your account. This can't be undone",
    rangeMin: "Please enter discount range",
    rangeFrom: 'Range from required.',
    rangeTo: 'Range To required.',
    DiscountValue: 'Discount is required.',
    minAmount: 'Minimum amount required.',
    isLimitNoOfTimesValue: "Please enter a valid number.",
    rangeErrorMessage: "Please enter a valid values",
    promotionNotFound: "Promotion coupon code not found.",
    DiscountPercentage: "Percentage Must",
    isBrand: "Please select a brand",
    isCategory: "Please select a category",
    specificProduct: "Please select a specific product"
  },

  profile: {
    myAccount: {
      imageRequired: "Please give a valid photo format (jpeg, jpg, gif, png)",
      firstNameRequired: "FirstName is required.",
      lastNameRequired: "LastName is required.",
      currentPasswordRequired: "Current password is required.",
      newPasswordRequired: "New password is required.",
      newPasswordMin: "Password must be at least 8 characters.  ",
      newPasswordMax: "Password should not exceed more than 25 characters.  ",
      confirm_passwordRequired: "Confirm password is required.",
      confirm_passwordMatches: "Confirm Password doesn't match.",
      linkSend: "Link sent to given email address.",
      emailNotExists: "Email address does not exist.",
      emailSend: "Email sent to given email address.",
      emailNotSend: "Email is not send.",
      minRole: "Minimum of 1 Role",
      roleMustNeed: "Must have a Role",
      maxRoleCharacter: "Role name must be greater than 3 characters",
      roleNameRequired: "Role name is required",
      roleCloned: "Role is cloned successfully",
      roleNotCloned: "Role is not cloned successfully",
      roleCreated: "Role is created successfully",
      roleNotCreated: "Role is not created successfully",
      roleUpdated: "Role is updated successfully",
      roleNotUpdated: "Role is not updated successfully",
      passwordChanged: "Password is changed successfully.",
      validPassword: "Please enter a valid current password",
      forgotPasswordLink: "Forgot password link sent to given email address.",
      roleDeleted: "Role is deleted successfully",
      roleNotDeleted: "Role is not deleted successfully",
      deletePermanently: "Deleting this Role will permanently remove this record from your account. This can't be undone",
    },
  },

  user: {
    userNotAvailable: "User is not available.",
    UserArray: "Must have User.",
    firstNameRequired: "FirstName is required.",
    lastNameRequired: "LastName is required.",
    emailRequired: "Email is required.",
    Email: "Invalid Email.",
    roleIdRequired: "Role is required.",
    roleIdTypeError: "Role must be a number.",
    userCloned: "User is cloned successfully.",
    userNotCloned: "User is not cloned.",
    created: "Users is created successfully.",
    notCreated: "Users is not created",
    updated: "User is updated successfully.",
    notUpdated: "User is not updated.",
    userStatusNotUpdated: "User status is not updated",
    userStatusUpdated: "User status is updated successfully",
    userNotDeleted: "User is not deleted successfully",
    userDeleted: "User is deleted successfully",
  },

  role: {
    roleNotAvailable: "Role is not available.",
    roleArray: "Must have Role.",
    firstNameRequired: "FirstName is required.",
    lastNameRequired: "LastName is required.",
    emailRequired: "Email is required.",
    Email: "Invalid Email.",
    roleIdRequired: "Role is required.",
    roleIdTypeError: "Role must be a number.",
    roleCloned: "Role is cloned successfully.",
    roleNotCloned: "Role is not cloned.",
    created: "Role is created successfully.",
    notCreated: "Role is not created",
    updated: "Role is updated successfully.",
    notUpdated: "Role is not updated.",
    roleStatusNotUpdated: "Role status is not updated",
    roleStatusUpdated: "Role status is updated successfully",
    roleNotDeleted: "Role is not deleted successfully",
    roleDeleted: "Role is deleted successfully",
  },

  companyConfiguration: {
    fullNameRequired: "Full name is required.",
    shortNameRequired: "short name is required.",
    emailRequired: "Email is required.",
    email: "Enter a valid email.",
    companyLogoURLRequired: "Company logo is required.",
    logoutTimeRequired: "Logout time is required.",
    loginType: "Please select at least one login type.",
    logoRequired: "company logo is required.",
  },

  themeConfiguration: {
    created: "ThemeConfiguration is created successfully.",
    notCreated: "ThemeConfiguration is not created",
    updated: "ThemeConfiguration is updated successfully.",
    notUpdated: "ThemeConfiguration is not updated",
    storeLogoUrlRequired: "Store logo is required",
    headerLogoUrlRequired: "Header logo is required",
    faviconUrlRequired: "Favicon logo is required",
    emailLogoUrlRequired: "Email logo is required",
    bFontFamilyRequired: "Body Font Family is required",
    bFontSizeRequired: "Body Font size is required",
    bFontWeightRequired: "Body Font weight is required",
    bLineHeightRequired: "Body Font height is required",
    bLetterSpacingRequired: "Body letter spacing is required",
    sBgcolorRequired: "Sidebar BG color is required",
    sbgActivecolorRequired: "Sidebar BG active color is required",
    sbGhovercolorRequired: "Sidebar BG hover color is required",
    sFontcolorRequired: "Sidebar font color is required",
    sActiveColorRequired: "Sidebar active color is required",
    sHoverColorRequired: "Sidebar hover color is required",
    pFontFamilyRequired: "Page font family is required",
    pFontSizeRequired: "Page font size is required",
    pFontWeightRequired: "Page font weight is required",
    pLineHeightRequired: "Page line height is required",
    pLetterSpacingRequired: "Page letter spacing is required",
    cBgcolorRequired: "Button BG color is required",
    cbgActivecolorRequired: "Button BG active color is required",
    cbGhovercolorRequired: "Button BG hover color is required",
    cFontcolorRequired: "Button font color is required",
    cActiveColorRequired: "Button active color is required",
    cHoverColorRequired: "Button hover color is required",
    primaryRequired: "Primary color is required",
    secondaryRequired: "Secondary color is required",
    redRequired: "Red color is required",
    greenRequired: "Green color is required",
    yellowRequired: "Yellow color is required",
    loginPageStyleRequired: "Login page style is required",
    loginBackgroundUrlRequired: "Login background image is required"
  },

  navigation: {
    sequenceChanged: "Sequence is changed successfully.",
    sequenceNotChanged: "Sequence is not change.",
    nameRequired: "Navigation name is required.",
    parentModuleIdTypeError: "Parent must be a number.",
    statusRequired: "Navigation status is required.",
    statusUpdated: "Navigation status is updated successfully.",
    statusNotUpdated: "Navigation status is not updated.",
    notDelete: "Navigation is not deleted successfully.",
    delete: "Navigation is deleted successfully.",
  },

  extension: {
    nameRequired: "Extension name is required.",
    parnetIdRequired: "Parent is required.",
    parnetIdTypeError: "Parent is must be a number.",
    navigationUrlRequired: "Navigation URL is required.",
    created: "Extension is created successfully.",
    notCreated: "Extension is not created.",
    updated: "Extension is updated successfully.",
    notUpdated: "Extension is not updated.",
    statusUpdated: "Extension status is updated successfully.",
    statusNotUpdated: "Extension status is not updated.",
    notDelete: "Extension is not deleted successfully.",
    delete: "Extension is deleted successfully.",
    notActionDelete: "Extension action is not deleted successfully.",
    actionDelete: "Extension action is deleted successfully.",
    deletePermanently: "Deleting these extension action will permanently remove this record from your account. This can't be undone",
  },

  action: {
    actionRequired: "Action is required.",
    httpMethodRequired: "HTTP Method is required.",
    urlPatternRequired: "URL pattern is required.",
  },
  customFilter: {
    name: "Name is required.",
    field: "Field is required.",
    operator: "Operator is required.",
    filterLength: "Please enter at least one filter",
  },

  customer: {
    tierRequired: "Tier is required.",
    billingAddress1Required: "Billing Address1 is required.",
    billingCityRequired: "Billing City is required.",
    billingStateRequired: "Billing State is required.",
    billingCountryRequired: "Billing Country is required.",
    billingPostalCodeRequired: "Billing postal code is required.",
    shippingAddress1Required: "Shipping Address1 is required.",
    shippingCityRequired: "Shipping City is required.",
    shippingStateRequired: "Shipping State is required.",
    shippingCountryRequired: "Shipping Country is required.",
    shippingPostalCodeRequired: "Shipping postal code is required.",
    companyNameRequired: "Company name is required.",
    password: "Password is required.",
    confirm_passwordRequired: "Please Re-enter password.",
    confirm_passwordMatches: "Password doesn't match.",
    customerNotFound: "Customer is not found.",
    created: "Customer is created successfully.",
    notCreated: "Customer is not created .",
    requiredNotes: "Notes are required.",
    notesCreated: "Notes created successfully.",
    notesNotCreated: "Notes not created",
    emailRequired: "Email is required.",
    email: "Enter a valid email.",
    subjectRequired: "Subject is required.",
    emailBodyRequired: "Email body is required.",
    personalDetailUpdate: "Customer personal details updated successfully.",
    personalDetailNotUpdate: "Customer personal details not updated.",
    defaultAddress: "Default address is change successfully. ",
    defaultNotAddress: "Default address not change. ",
    addAddress: "Address is added successFully.",
    failToAddAddress: "Address doesn't added.",
    taxChange: "Tax status is change successfully.",
    taxNotChange: "Tax status doesn't change.",
    customerStatus: "Customer status is updated successfully",
    customerNotStatus: "Customer status is not updated.",
    customerDeleted: "Customer is deleted successfully",
    customerNotDeleted: "Customer is not deleted.",
    poNumberRequired: "PO number is required.",
    poCreated: "PO is saved successfully.",
    poNotCreated: "Po is not Saved.",
    tagCreated: "Tag is created successfully.",
    tagNotCreated: "Tag is not created",
    tagDeleted: "Tag is deleted successfully.",
    tagNotDeleted: "Tag doesn't deleted.",
    amount: "Amount is required",
    notValidAmount: "Please enter a valid amount",
    creditAmountRequired: "Credit Amount is required.",
    reasonRequired: "Reason is required.",
    deletePermanently: "Are you sure you want to delete this Tier?",
    addressNotFound: 'Customer Address is not found.',
    updated: "Customer updated successfully.",
    notUpdated: "Customer not updated.",
    resetPasswordLink: 'Reset password link send to given email address. ',
    resetPasswordLinkNotSend: 'Reset password link is not send. ',
    logoSize: 'Size of logo image is required ',
    CustomLogoMessage: "Feedback Message Required "
  },
  company: {
    corporateName: "Corporate name is required.",
    address1: "Address is required.",
    state: "State is required.",
    city: "City is required.",
    postal_code: "Postal code is required.",
    email: "Email is required.",
    webSite: "WebSite is required.",
    countryCode: "Country code is required.",
    zipCode: "Postal code is required.",
    companyNotFound: "Company is not found.",
    created: "Company is created successfully.",
    notCreated: "Company is not created.",
    statusUpdated: "Company status is changed successfully.",
    statusNotUpdated: "Company status is not changed.",
    deleted: "Company is deleted successfully",
    notDeleted: "Company is not deleted",
    updated: "Company is updated successfully.",
    notUpdated: "Company is not updated."
  },

  // pageEditSetting: {
  //   topic: {
  //     topicNotUpdated: "Something went wrong.Please try again.",
  //     topicUpdated: "Topic successfully updated.",
  //   },
  //   general: {
  //     title: "Page name is required.",
  //     password: "Password is required.",
  //     pass_required: "Password expiration is required.",
  //   },
  //   metaData: {
  //     slug: "Content slug is required.",
  //     topic_title: "Page Title is required.",
  //     meta_description: "Meta Description is required.",
  //     meta_keywords: "Meta Keywords is required.",
  //   },
  // },
  bundle: {
    statusUpdated: "Bundle status is not updated.",
    statusNotUpdated: "Bundle status is updated successfully.",
    delete: "Bundle is deleted successfully.",
    notDelete: "Bundle is not deleted .",
    deletePermanently: "Deleting these Product will permanently remove this record from your account. This can't be undone",
  },
  pageEditSetting: {
    topic: {
      topicNotUpdated: "Something went wrong.Please try again.",
      topicUpdated: "Topic successfully updated.",
    },
    general: {
      title: "Page name is required.",
      password: "Password is required.",
      pass_required: "Password expiration is required.",
    },
    metaData: {
      slug: "Content slug is required.",
      topic_title: "Page Title is required.",
      meta_description: "Meta Description is required.",
      meta_keywords: "Meta Keywords is required.",
    },
  },

  pageCreate: {
    nameRequired: "Page name is required.",
  },

  tier: {
    storeIdRequired: "Please select a store.",
    nameRequired: "Tier name is required.",
    tierValueRequired: "Tier is required.",
    tierCreated: "Tier is created successfully",
    tierNotCreated: 'Tier is not created.',
    tierUpdated: "Tier is updated successfully",
    tierNotUpdated: "tier is not updated.",
    tierStatusUpdated: "Tier status update successfully",
    tierStatusNotUpdated: "Tier status is not updated.",
    tierDeleted: "Tier is deleted successfully.",
    tierNotDeleted: 'Tier is not deleted.',
    tierPermanentDelete: "Deleting these Tier will permanently remove this record from your account. This can't be undone",
  },

  templateCreate: {
    nameRequired: "Template name is required.",
  },
  customCssConfigurationAlertMessage: {
    file_upload: "Custom CSS updated successfully.",
  },

  storeBuilder: {
    nameRequired: "Store name is required.",
    payBusinessMethodId: "Store Business method is required.",
    storeRequired: "Domain is required.",
    storeDeleted: "Store is deleted successfully.",
    storeStatusUpdated: "Store status is updated successfully",
    setupCreated:"Store created successfully",
    setupNotCreated:"Store not created",
    setupUpdated:"Store updated successfull",
    setupNotUpdated:"Store not updated",
    general: {
      organizationId: "Business name is required. ",
      sportId: "Category is required.",
      code: "Store code is required.",
      salesPersonId: "Sales person is required.",
      directAccessURL: "Store Access URL is required.",
      navCustomerId: "Nav customer ID is required.",
      estimateShipDate: "Estimate ship date is required.",
      followUpdate: "Follow up date is required.",
      teamName: "Team name is required.",
      email: "Contact email is required.",
      openStoreOn: "Store Open date is required.",
      closeStoreOn: "Store close date is required.",
      firstName: "First name is required.",
      lastName: "Last name is required.",

      updated: "General information is updated successfully.",
    },

    paymentInfo: {
      updated: "Payment info is updated successfully.",
    },

    fees: {
      name: "Fees name is required.",
      type: "Fees type is required.",
      amount: "Fees amount is required.",
      minamount: "Fees amount must be greater than 0",

      created: "Fee is created successfully.",
      updated: "Fee is updated successfully.",
    },
    tier: {
      name: "Tier fee name is required.",
      amountFrom: "Tier fee amount is required.",
      amountTo: "Tier fee amount is required.",
      charge: "Tier fee is required",
      minamount: "Tier fee must be greater than 0",

      created: "Tier fee is created successfully.",
      updated: "Tier fee is updated successfully.",
    },

    taxes: {
      updated: "Taxes & fee is updated successfully.",
      feesTax: "FeesTax is Created Successfully",
    },

    coupon: {
      name: "Coupon name is required.",
      type: "Coupon type is required.",
      amount: "Coupon amount is required.",
      minamount: "Coupon amount must be greater than 0",
      couponCodes: "Coupon code is required.",

      created: "Coupon is created successfully.",
      updated: "Coupon is updated successfully.",
    },

    messages: {
      updated: "Messages is updated successfully.",
      notUpdated: "Messages not updated.",
    },

    products: {
      cloneCreated: "Products clone created successfully.",
      cloneNotCreated: "Products clone has not been created."
    },

    commonMessages: {
      minpercentage: "Percentage must be greater than 0",
      maxpercentage: "Percentage must be less than or equal to 100",
    },

    clone: {
      name: "Store Name is required",
      code: "Store code is required",
      url: "Store URL is required",
      created: "Store clone has been created successfully"
    }

  },

  organization: {
    storeIdRequired: "Please select a store.",
    nameRequired: "Organization name is required.",
  },

  sport: {
    storeIdRequired: "Please select a store.",
    nameRequired: "Sport name is required.",
  },

  team: {
    storeIdRequired: "Please select a store.",
    nameRequired: "Team name is required.",
  },

  paymentGateway: {
    storeIdRequired: "Please select a store.",
    nameRequired: "Payment Gateway name is required.",
    privateKeyRequired: "Private Key is required.",
    publicKeyRequired: "Public Key is required.",
    customerIDRequired: "Customer ID is required.",
    accessURLRequired: "Access URL is required.",
    tokenRequired: "Token is required.",
  },
  order: {
    shippingAddressUpdated: "Shipping Address updated successfully.",
    billingAddressUpdated: "Billing Address updated successfully",
    OrderUPdated: 'Order updated successfully.',
    noteUpdated: 'Note Updated successfully.',
    fileRequired: "File is required.",
    docDeleted: 'Document Delete successfully.',
    docAdded: 'Document Added successfully.',
    docNotAdded: 'Document Not added.',
    tagName: 'Tag Name is Required.',
    postTitle: 'Please Enter Title',
    postDescription: 'Please Enter Description',
    postStore: 'Post created successfully.',
    postNotStore: 'Post not Created.',
    statusUpdated: 'Order status updated successfully.',
    statusNotUpdated: 'Order status not updated.',
    trackingStored: "Tracking information updated successfully.",
    trackingNotStored: "Tracking information not updated.",
    fraud: "Order status change to fraud.",
    statusNotChange: "Order status change not change.",
    trackingNo: "Tracking number is required.",
    shippingDate: "Shipping date is required.",
    shippedVIA: "Shipped via is required.",
    cancelOrder: 'Order cancel successfully.',
    orderNotCanceled: 'Order fail to canceled.',
    duplicateOrder: 'Order clone successfully.',
    orderNotDuplicate: 'Order fail to clone.',
    reviewMailSend: 'Order review mail send successfully.',
    reviewMailNotSend: 'Order review mail send not send.',
    orderIPNotBlocked: 'Order IP not block.',
    orderIPBlocked: 'Order IP block successfully.',
    selectOrderForNav: 'Please select order for NavSync.',
    navSync: "Orders sync successfully",
    navNotSync: "Order fail to sync.",
    updateQty: 'Product item quantity updated successfully.',
    updateNotQty: 'Product item quantity not updated',
    cancelOrderItem: "Order item cancel successfully.",
    cancelOrderItemFail: "Order item fail cancel.",
    orderNotFound: "Order not found."
  },
  thirdPartyService: {
    nameRequired: "Third Party Services name is required.",
    thirdPartyServiceDropdown: "Third Party Services is required",
    storeName: "Store Name is required.",
    thirdPartyCreated: "Third Party Service is created successfully",
    thirdPartyNotCreated: 'Third Party Service is not created.',
    thirdPartyUpdated: "Third Party Service is updated successfully",
    thirdPartyNotUpdated: "Third Party Service is not updated.",
    thirdPartyStatusUpdated: "Third Party Service status update successfully",
    thirdPartyStatusNotUpdated: "Third Party Service status is not updated.",
    thirdPartyDeleted: "Third Party Service is deleted successfully.",
    thirdPartyNotDeleted: 'Third Party Service is not deleted.',
    thirdPartyPermanentDelete: "Deleting these Third Party Service will permanently remove this record from your account. This can't be undone",
  },
  giftCard: {
    nameRequired: "Gift Card name is required",
    priceRequired: "Price is required.",
    ourSKURequired: "Product SKU is required",
    giftCardEnddate: "End Date is required.",
    imageRequired: "Gift Card image is required",
    giftCardDeleted: "Gift Card deleted successfully.",
    giftCardNotDeleted: 'Gift Card is not deleted.',
    giftCardCreated: "giftCard is created successfully",
    giftCardUpdated: "Gift Card is updated successfully",
    giftCardNotUpdated: "Gift Card is not updated.",
    giftCardNotCreated: 'giftCard is not created.',
    giftCardPermanentDelete: "Deleting  giftCard will permanently remove this record from your account. This can't be undone",
    giftCardStatusUpdated: "Gift Card status is updated successfully",
    giftCardStatusNotUpdated: "Gift Card status is not updated.",
  },

  paymentOptions: {
    nameRequired: "Payment Options name is required",
    paymentOptionsNotCreated: 'Payment Options is not created.',
    paymentOptionsCreated: "Payment Options is created successfully",
    paymentOptionsNotDeleted: "Payment Options deleted successfully.",
    paymentOptionsDeleted: "Payment Options deleted successfully.",
    paymentOptionsPermanentDelete: "Deleting  Payment Options will permanently remove this record from your account. This can't be undone",
    paymentOptionsStatusUpdated: "Payment Options status is updated successfully",
    paymentOptionsStatusNotUpdated: "Payment Options status is not updated.",
    paymentOptionsUpdated: "Payment Options is updated successfully",
    paymentOptionsNotUpdated: "Payment Options is not updated.",
  },

  shippingService: {
    nameRequired: "Shipping Service name is required",
    shippingServiceNotCreated: 'Shipping Service is not created.',
    shippingServiceCreated: "Shipping Service is created successfully",
    shippingServiceDeleted: "Shipping Service deleted successfully.",
    shippingServiceNotDeleted: "Shipping Service Not deleted successfully.",
    shippingServicePermanentDelete: "Deleting  Shipping Service will permanently remove this record from your account. This can't be undone",
    shippingServiceStatusUpdated: "Shipping Service status is updated successfully",
    shippingServiceStatusNotUpdated: "Shipping Service status is not updated.",
    shippingServiceUpdated: "Shipping Service is updated successfully",
    shippingServiceNotUpdated: "Shipping Service is not updated.",
    storeIdRequired: "Please select a store.",
  },

  CompanyResetPassword: {
    ResetPasswordSuccess: "Password Reset Link Sent a Successfully",
    ResetPasswordNotSuccess: "Password Reset Link is not a sent",
  },

  messageKey: {
    messageKeyRequired: "Message Key Name is required",
    messageKeyNotCreated: 'Message Key is not created.',
    messageKeyCreated: "Message Key is created successfully",
    messageKeyDeleted: "Message Key deleted successfully.",
    messageKeyNotDeleted: "Message Key not deleted successfully.",
    messageKeyPermanentDelete: "Deleting  Message Key will permanently remove this record from your account. This can't be undone",
    messageKeyStatusUpdated: "Message Key status is updated successfully",
    messageKeyStatusNotUpdated: "Message Key status is not updated.",
    messageKeyUpdated: "Message Key is updated successfully",
    messageKeyNotUpdated: "Message Key is not updated.",
  },

  message: {
    messageRequired: "Message is required",
    messageNotCreated: 'Message is not created.',
    messageCreated: "Message is created successfully",
    messageDeleted: "Message deleted successfully.",
    messageNotDeleted: "Message not deleted successfully.",
    messagePermanentDelete: "Deleting Message will permanently remove this record from your account. This can't be undone",
    messageStatusUpdated: "Message status is updated successfully",
    messageStatusNotUpdated: "Message status is not updated.",
    messageUpdated: "Message is updated successfully",
    messageNotUpdated: "Message is not updated.",
    messageKeyIdRequired: "Please select a store.",
    storeIdRequired: "Please select a store.",
  },

  emailTemplate: {
    storeIdRequired: "Please select a store.",
    emailTemplateSubjectRequired: "Subject is required.",
    emailBodyRequired: "Email body is required.",
    emailTemplateLabelRequired: "Email Template label is required",
    emailTemplateNotCreated: 'Email Template is not created.',
    emailTemplateCreated: "Email Template is created successfully",
    emailTemplateDeleted: "Email Template deleted successfully.",
    emailTemplateNotDeleted: "Email Template not deleted successfully.",
    emailTemplatePermanentDelete: "Deleting emailTemplate will permanently remove this record from your account. This can't be undone",
    emailTemplateStatusUpdated: "Email Template status is updated successfully",
    emailTemplateStatusNotUpdated: "Email Template status is not updated.",
    emailTemplateUpdated: "Email Template is updated successfully",
    emailTemplateNotUpdated: "Email Template is not updated.",
    emailTemplateKeyIdRequired: "Please select a store.",
  },

  shippingMethod: {
    shippingVia: "Shipping Via is required",
    charges: "Shipping Method Charges is required",
    nameRequired: "Shipping Method name is required",
    shippingServicesIdRequired: "Please Select Shipping Service",
    shippingMethodNotCreated: 'Shipping Method is not created.',
    shippingMethodCreated: "Shipping Method is created successfully",
    shippingMethodDeleted: "Shipping Method deleted successfully.",
    shippingMethodNotDeleted: "Shipping Method not deleted successfully.",
    shippingMethodPermanentDelete: "Deleting  Shipping Method will permanently remove this record from your account. This can't be undone",
    shippingMethodStatusUpdated: "Shipping Method status is updated successfully",
    shippingMethodStatusNotUpdated: "Shipping Method status is not updated.",
    shippingMethodUpdated: "Shipping Method is updated successfully",
    shippingMethodNotUpdated: "Shipping Method is not updated.",
    storeIdRequired: "Please select a store.",
  },

  shippingCharge: {
    charge: "Shipping Charge is required",
    orderTotalMin: "Order Total Minimum is required",
    orderTotalMax: "Order Total Maximum is required",
    shippingChargeIdRequired: "Please Select Shipping Service",
    shippingChargeNotCreated: 'Shipping Charge is not created.',
    shippingChargeCreated: "Shipping Charge is created successfully",
    shippingChargeDeleted: "Shipping Charge deleted successfully.",
    shippingChargeNotDeleted: "Shipping Charge not deleted successfully.",
    shippingChargePermanentDelete: "Deleting  Shipping Charge will permanently remove this record from your account. This can't be undone",
    shippingChargeStatusUpdated: "Shipping Charge status is updated successfully",
    shippingChargeStatusNotUpdated: "Shipping Charge status is not updated.",
    shippingChargeUpdated: "Shipping Charge is updated successfully",
    shippingChargeNotUpdated: "Shipping Charge is not updated.",
    storeIdRequired: "Please select a store.",
  },

  commonExport: {
    success: "Data export completed.",
    failed: "Data export is failed.",
  },

  table: {
    stored: "Table view saved successfully.",
    notStored: "Table view not saved.",
  },

  newsletter: {
    unsubscribe: "User is Unsubscribed Successfully",
    notunsubscribe: "User is not Unsubscribed"
  },

  cache: {
    selectBrand: "Please select a brands.",
    selectStore: "Please select a store.",
    clearBrandCache: 'Brands cache clear successfully.',
    brandCacheNotClear: 'Brands cache not clear.',
    selectCategory: "Please select a Categories.",
    clearCategoryCache: 'Categories cache clear successfully.',
    CategoryCacheNotClear: 'Categories cache not clear.',
    clearHomeCache: 'Home cache clear successfully.',
    clearHomeCacheCacheNotClear: 'Home cache not clear.',
  },
  cmsConfig: {
    themeStored: " Theme updated successfully.",
    themeNotStored: " Theme not updated."
  },
  appConfig: {
    create: 'App config created successfully.',
    NotCreate: 'App config not created.',
    update: 'App config Updated successfully.',
    NotUpdate: 'App config not updated.',
    statusChanged: 'App config status changed successfully.',
    statusNotChanged: 'App config status not change.',
    delete: "Deleting these App Config will permanently remove this record from your account. This can't be undone",
    name: "Name is required.",
    value: "Value is required.",
    store: "Store is required.",
  },
  fixCharges: {
    nameRequired: "name is required",
    charges: "charges is required",
    fixChargesCreated: "Fix Charges is created successfully",
    fixChargesNotCreated: 'Fix Charges is not created.',
    fixChargesUpdated: "Fix Charges is updated successfully",
    fixChargesNotUpdated: "Fix Charges is not updated.",
    fixChargesDeleted: "Fix Charges deleted successfully.",
    fixChargesNotDeleted: "Fix Charges not deleted successfully.",
    fixChargesPermanentDelete: "Deleting  Fix Charges will permanently remove this record from your account. This can't be undone",
    fixChargesStatusUpdated: "Fix Charges status is updated successfully",
    fixChargesStatusNotUpdated: "Fix Charges status is not updated.",
  },
  topic: {
    publishSuccess: "Page published successfully",
    publishError: "Unable to publish the page. Please try again Later"
  }
};
